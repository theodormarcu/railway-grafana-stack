worker_processes 1;

events {
    worker_connections 512;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    proxy_connect_timeout 600s;
    proxy_send_timeout 600s;
    proxy_read_timeout 600s;
    send_timeout 600s;
    client_body_timeout 600s;
    keepalive_timeout 600s;

    # Disable caching for authentication
    add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate";
    add_header Pragma "no-cache";
    expires 0;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;

    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    server {
        listen 80;

        # Enforce SSL in production
        # listen 443 ssl http2;
        # ssl_certificate /etc/nginx/ssl/cert.pem;
        # ssl_certificate_key /etc/nginx/ssl/key.pem;

        # Basic auth - explicitly set for the server
        auth_basic "Protected Area";
        auth_basic_user_file /etc/nginx/.htpasswd;

        # Ensure auth is revalidated
        proxy_no_cache "1";
        proxy_cache_bypass "1";

        # Homepage
        location = / {
            auth_basic "Protected Area";
            auth_basic_user_file /etc/nginx/.htpasswd;
            default_type text/html;
            add_header Cache-Control "no-store, no-cache, must-revalidate";
            return 200 '<html><body><h1>Monitoring</h1><ul><li><a href="/prometheus/">Prometheus</a></li><li><a href="/loki/">Loki</a></li><li><a href="/tempo/">Tempo</a></li></ul></body></html>';
        }

        # Simple proxies
        location /prometheus/ {
            auth_basic "Protected Area";
            auth_basic_user_file /etc/nginx/.htpasswd;
            proxy_pass $PROMETHEUS_INTERNAL_URL/;
            proxy_http_version 1.1;

            # Extended timeouts for long-running queries
            proxy_read_timeout 300s;
            # Headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            # Prometheus uses websockets for some operations like alerts
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
        }

        # Add a location for Prometheus health/ready endpoint if needed
        location /prometheus/-/ready {
            proxy_pass $PROMETHEUS_INTERNAL_URL/-/ready;
            proxy_http_version 1.1;
            auth_basic off; # If you have auth enabled
        }

        location /tempo/ {
            auth_basic "Protected Area";
            auth_basic_user_file /etc/nginx/.htpasswd;
            proxy_pass $TEMPO_INTERNAL_URL/;
            proxy_read_timeout 120s;
        }

        location /loki/api/v1/push {
            auth_basic "Protected Area";
            auth_basic_user_file /etc/nginx/.htpasswd;
            proxy_pass $LOKI_INTERNAL_URL/loki/api/v1/push;
            proxy_http_version 1.1;
            proxy_read_timeout 300s;
        }

        location /loki/api/v1/labels {
            auth_basic "Protected Area";
            auth_basic_user_file /etc/nginx/.htpasswd;
            proxy_pass $LOKI_INTERNAL_URL/loki/api/v1/labels;
            proxy_http_version 1.1;
            proxy_read_timeout 300s;
        }

        location /loki/api/v1/query_range {
            auth_basic "Protected Area";
            auth_basic_user_file /etc/nginx/.htpasswd;
            proxy_pass $LOKI_INTERNAL_URL/loki/api/v1/query_range;
            proxy_http_version 1.1;
            proxy_read_timeout 600s;
        }


        # Health check endpoint - exact match for efficiency
        location = /loki/ready {
            proxy_pass $LOKI_INTERNAL_URL/ready;
            proxy_http_version 1.1;
            auth_basic off;

            # Short timeout for health checks
            proxy_read_timeout 5s;
            proxy_connect_timeout 2s;

            # Cache control to prevent caching of health check results
            add_header Cache-Control "no-cache, no-store, must-revalidate";
        }

        location /loki/ {
            auth_basic "Protected Area";
            auth_basic_user_file /etc/nginx/.htpasswd;
            proxy_pass $LOKI_INTERNAL_URL/;
            proxy_http_version 1.1;

            # Websocket support
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;

            # Extended timeouts
        }

        # Health check endpoint for the proxy itself
        location = /health {
            auth_basic off;
            default_type text/plain;
            return 200 "Nginx proxy is running";
        }

        # Catch-all to ensure authentication for any unlisted paths
        location / {
            auth_basic "Protected Area";
            auth_basic_user_file /etc/nginx/.htpasswd;
            return 404 "Not Found";
        }
    }
}